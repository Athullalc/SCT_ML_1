{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1cRq3uxEfrESfZ-YB87Bxvxbs927KwfM8","timestamp":1752244471973}],"authorship_tag":"ABX9TyPDzhxAKNpnZjkT2Z4e6bpc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"CNggiuog9_MY","colab":{"base_uri":"https://localhost:8080/","height":73},"executionInfo":{"status":"ok","timestamp":1752164215546,"user_tz":-330,"elapsed":6212,"user":{"displayName":"Athul Lal C","userId":"16042369266900141789"}},"outputId":"bc340f6f-bad7-4102-f9f2-972a8a4d5a6e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-66c7641e-94e6-46f4-b9fc-4392ac75c7e0\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-66c7641e-94e6-46f4-b9fc-4392ac75c7e0\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving House Price Prediction Dataset.csv to House Price Prediction Dataset (1).csv\n"]}],"source":["from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Reading the uploaded CSV file into a pandas DataFrame\n","df = pd.read_csv('/content/House Price Prediction Dataset.csv')\n","print(df.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZBGc7yyOIDv8","executionInfo":{"status":"ok","timestamp":1752164318517,"user_tz":-330,"elapsed":12,"user":{"displayName":"Athul Lal C","userId":"16042369266900141789"}},"outputId":"3515d773-6cb1-445e-b2c4-b30626c07dd2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   Id  Area  Bedrooms  Bathrooms  Floors  YearBuilt  Location  Condition  \\\n","0   1  1360         5          4       3       1970  Downtown  Excellent   \n","1   2  4272         5          4       3       1958  Downtown  Excellent   \n","2   3  3592         2          2       3       1938  Downtown       Good   \n","3   4   966         4          2       2       1902  Suburban       Fair   \n","4   5  4926         1          4       2       1975  Downtown       Fair   \n","\n","  Garage   Price  \n","0     No  149919  \n","1     No  424998  \n","2     No  266746  \n","3    Yes  244020  \n","4    Yes  636056  \n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","# Step 1: Load the dataset\n","df = pd.read_csv(\"/content/House Price Prediction Dataset.csv\")\n","\n","# Step 2: Select features (independent variables) and target (dependent variable)\n","X = df[[ \"Area\",\"Bedrooms\", \"Bathrooms\"]]\n","y = df[\"Price\"]\n","\n","# Step 3: Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Step 4: Create and train the linear regression model\n","model = LinearRegression()\n","model.fit(X_train, y_train)\n","\n","# Step 5: Predict on test data\n","y_pred = model.predict(X_test)\n","\n","# Step 6: Evaluate the model\n","mse = mean_squared_error(y_test, y_pred)\n","r2 = r2_score(y_test, y_pred)\n","\n","print(\"Model Evaluation:\")\n","print(\"Mean Squared Error:\", mse)\n","print(\"RÂ² Score:\", r2)\n","\n","# Step 7: Show the learned coefficients\n","print(\"\\nModel Coefficients:\")\n","print(\"Intercept:\", model.intercept_)\n","for feature, coef in zip(X.columns, model.coef_):\n","    print(f\"{feature}: {coef}\")\n","\n","# Step 8: Predict price for a new house\n","new_house = [[ 1700,3, 2]]  # 1700 sq ft, 3 bedrooms, 2 bathrooms\n","predicted_price = model.predict(new_house)\n","print(\"\\nPredicted price for new house:\", predicted_price[0])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7WIoyYZTIgDS","executionInfo":{"status":"ok","timestamp":1752164555412,"user_tz":-330,"elapsed":25,"user":{"displayName":"Athul Lal C","userId":"16042369266900141789"}},"outputId":"3b46d29b-5b09-415a-ca9a-62b0993ec48a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Evaluation:\n","Mean Squared Error: 78440549944.81049\n","RÂ² Score: -0.008248471565956539\n","\n","Model Coefficients:\n","Intercept: 561284.0391500255\n","Area: -0.09540955777516712\n","Bedrooms: -13.259537727485167\n","Bathrooms: -9759.661183441609\n","\n","Predicted price for new house: 541562.741921742\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n","  warnings.warn(\n"]}]}]}